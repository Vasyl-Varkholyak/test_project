cd <назва папки> - перехід у вказану папку
cd .<назва папки> - перехід у приховану папку
nodepad.exe <назва файлу> - запустити файл да допомогою нодпад


git init - ініціалізувати git (це для створення нової папки і загрузки насервер)
git remote - добавляється url до віддаленого серверу


git branch <name_brach>  - створити нову бренчу (але залишитись в master)
git checkout -b <name_brach> - створить нову бренчу і зразу перейде в неї
git checkout <name-branch> - перемикатись між бренчами

git fetch - стягує зміни з сервера (але не мерджить)
git pull - стягує з сервера файли і зразу мерджить його (посуті зробить фетш і потім змерджить)

git status - показує стан в якому перебувають файли в репозиторії
git log - подивитись перелік останніх комітів
git show - покаже вміст останнього коміту
git show <ідентифікатор коміту> - відкриє певний коміт по ідентифікатору (після того name only щоб подивитись імена файлів)
git branch -a - побачити всі бренчі, які доступні на сервері
git gitk - запустить (якщо він становлений) графічний інтерпретатор


git add <file-name> - додає новий створений файл (тепер git буде завжди його бачити і за ним слідкувати)
git reset soft - коміт видаляється легко (при видаленні потрібно бути обережним, бо його дуже важко відновити потім)
git reset hard - коміт видалиться повністю і його вже не відновити


git commit -m "назва коміту"
git commit --amend - він бере останній зроблений коміт, відкриває його і дає змогу закинути нові файли в той коміт (не бажано робити на бренчі, яку хтось використовує бо зміниться ідентифікатор бренчі)

git reset HEAD <file_name> - ресетне всі зміни файлу (викидає з репозиторію і git його більше не бачить і не відслідковує)
git checkout file_name - заберає всі зміни зроблені у файлі

git push origin name_brach - пушає зміни на сервер

git rebase master - берем всі коміти, які прийшли в мастері і підпихаєм в вертикаль з нашими комітами (тобто стягує всі недостаючі коміти, твої коміти стоять зверху) (можливо треба буде пофіксити конфлікти)

git merge
